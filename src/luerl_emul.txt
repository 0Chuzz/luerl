%% Stakc fiddling.
{push,X}		rest			--> [x|rest]
push_nil		rest			--> [nil|rest]
pop			[_|rest]		--> rest
{pop,N}			[sn,...,s1|rest]	--> rest
dup			[s1|rest]		--> [s1,s1|rest]
swap			[s1,s2|rest]		--> [s2,s1|rest]
dup			[v|rest]		--> [v,v|rest]
{dup,N}			[s1,...,sn|rest]	--> [sn,s1,...,sn|rest]
%% Accessing tables/environment.
get_env			[name|rest]		--> [val|rest]
{get_env,Key}		rest			--> [val|rest]
set_env			[name,val|rest]		--> rest
{set_env,Key}		[val|rest]		--> rest
get_key			[key,table|rest]	--> [val|rest]
{get_key,Key}		[table|rest]		--> [val|rest]
set_key			[key,table,value|rest]	--> rest
{set_key,Key}		[table,value|rest]	--> rest
get_local		[name|rest]		--> [val|rest]
{get_local,Name}	rest			--> [val|rest]
set_local		[name,value|rest]	--> rest
{set_local,Name}	[value|rest]		--> rest
%% Expressions.
{build_tab,N}		[vn,kn,...,v1,k1|rest]	--> [tab|rest]
{op2,Op}		[a2,a1|rest]		--> [res|rest]
{op1,Op}		[a|rest]		--> [res|rest]
{op1,Op}		a			--> res
first_value		val			--> val
%% Control instructions, br are relative, jmp are absolute.
{br_true,Off}		value			--> 
{br_true,Off}		[value|rest]		--> rest
{br_false,Off}		[value|rest]		--> rest
{br,Off}		rest			--> rest
{jmp_true,Adr}		[value|rest]		--> rest
{jmp_false,Adr}		[value|rest]		--> rest
{jmp,Adr}		rest			--> rest
forprep			[step,limit,init|rest]	--> [init,limit,step|rest]
{forloop,start}		[val,limit,step|rest]	--> [val,val,limit,step|rest]
%% Function calls.
{pack_vals,N}		[an,...,a1|rest]	--> [vals|rest]
{unpack_vals,N,M}	[am,...,a1|rest]	--> [vn,...,v1|rest]
{unpack_args,N}		[as|rest]		--> [an,...,a1|rest]
{build_func,Locv,Locf,Instrs}
			rest			--> [function|rest]
call			[args,func|rest]	--> [args|rest]
tailcall		[args,func|rest]	--> [args|rest]
return			[vals|rest]		--> [vals|oldrest]
%% Local environment shuffling.
push_env		rest			--> [env|rest]
pop_env			[env|rest]		--> rest
pop_env_free		[env|rest]		--> rest


local x = 5

{push,5},
{push,<<"x">>},
set_local

x.s = 5

{push,5},
{push,<<"x">>},
get_local
{push,<<"s">>},
set_key

x.y.z(e)

{push,<<"e">>},
{build_args,1},
get_env,
{push,<<"x">>},
get_local,
{push,<<"y">>},
get_key,
{push,<<"z">>},

